{"version":3,"sources":["components/InputCSV.js","components/shared/Button.js","components/AccordionRow.js","components/shared/UnstyledButton.js","components/Accordion.js","components/CreateGroupForm.js","components/PrefixAccordions.js","utils/parseUtils.js","App.js","serviceWorker.js","index.js"],"names":["InputCSV","handleFileUpload","className","htmlFor","id","type","accept","onChange","Button","onClick","disabled","children","AccordionRow","props","toggleEdit","setState","prevState","isEditing","onGroupSelect","selection","item","parentGroup","handleGroupChange","newGroup","value","state","this","groupOptions","defaultSelection","label","defaultValue","options","map","groupOption","Component","UnstyledButton","style","Accordion","toggleOpen","isOpen","groupName","groupItems","key","CreateGroupForm","editing","newGroupName","groupNameTaken","toggleEditing","updateNewGroupName","createGroup","onSubmit","autoFocus","PrefixAccordions","prefixGroups","Object","keys","length","parseCSV","f","r","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","strings","result","split","groups","groupByPrefix","readAsBinaryString","s","trim","prefix","found","substring","push","App","e","a","target","files","console","warn","message","word","oldGroup","idx","findIndex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3bc137ad.chunk.js","sourcesContent":["import React from 'react';\n\nconst InputCSV = ({handleFileUpload}) => (\n  <label className='btn btn-outline-info mt-2' htmlFor='csv'>\n    <input id='csv' type='file' accept='.csv' className='d-none' onChange={handleFileUpload}/>\n    Upload .csv\n  </label>\n);\n\nexport default InputCSV;\n","import React from 'react';\n\nconst Button = ({onClick, disabled, children, className}) => (\n  <button onClick={onClick} disabled={disabled} className={className}>{children}</button>\n);\n\nexport default Button;","import React, {Component} from 'react';\nimport Select from 'react-select';\nimport Button from './shared/Button';\n\nclass AccordionRow extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isEditing: false\n    };\n  }\n\n  toggleEdit = () => {\n    this.setState((prevState) => ({isEditing: !prevState.isEditing}));\n  };\n\n  onGroupSelect = (selection) => {\n    const {item, parentGroup, handleGroupChange} = this.props;\n    const newGroup = selection.value;\n    if (newGroup !== parentGroup) {\n      handleGroupChange(item, parentGroup, newGroup);\n    }\n    this.toggleEdit();\n  };\n\n  render() {\n    const {isEditing} = this.state;\n    const {item, parentGroup, groupOptions} = this.props;\n    const defaultSelection = {label: parentGroup, value: parentGroup};\n    return (\n      <>\n        <div className='d-flex align-items-center'>\n          <div className='mr-2'>\n            {item}\n          </div>\n          {\n            isEditing ? (\n              <div className='w-50'>\n                <Select\n                  defaultValue={defaultSelection}\n                  options={\n                    groupOptions.map(groupOption => ({\n                      label: groupOption,\n                      value: groupOption\n                    }))\n                  }\n                  onChange={this.onGroupSelect}\n                  className='flex-fill'\n                />\n              </div>\n            ) : (\n              <Button onClick={this.toggleEdit} className='btn btn-sm btn-outline-secondary'>Change Group</Button>\n            )\n          }\n        </div>\n        <br/>\n      </>\n    );\n  }\n}\n\nexport default AccordionRow;","import React from 'react';\n\nconst UnstyledButton = ({onClick, disabled, children, className}) => (\n  <button\n    onClick={onClick}\n    disabled={disabled}\n    className={className}\n    style={{'color': 'black', 'size': 20, 'fontWeight': 'bold'}}\n  >\n    {children}\n  </button>\n);\n\nexport default UnstyledButton;","import React, {Component} from 'react';\nimport AccordionRow from './AccordionRow';\nimport UnstyledButton from './shared/UnstyledButton';\n\nclass Accordion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  toggleOpen = () => {\n    this.setState((prevState) => ({isOpen: !prevState.isOpen}));\n  };\n\n  render() {\n    const {groupName, groupItems, groupOptions, handleGroupChange} = this.props;\n    const {isOpen} = this.state;\n    return (\n      <div className='mb-1'>\n        <UnstyledButton\n          onClick={this.toggleOpen}\n          className='btn mb-3 shadow-none'\n        >\n          {isOpen ? '-' : '+'} {groupName}\n        </UnstyledButton>\n        <div className='ml-4'>\n          {isOpen && (\n            groupItems.map(item =>\n              <AccordionRow\n                key={item}\n                item={item}\n                parentGroup={groupName}\n                groupOptions={groupOptions}\n                handleGroupChange={handleGroupChange}\n              />\n            )\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Accordion;","import React from 'react';\nimport Button from \"./shared/Button\";\n\nconst CreateGroupForm = ({\n                           editing,\n                           newGroupName,\n                           groupNameTaken,\n                           toggleEditing,\n                           updateNewGroupName,\n                           createGroup\n                         }) => (\n  <div className='mb-1 d-inline-flex align-items-center'>\n    <Button onClick={toggleEditing} className='btn btn-outline-primary shadow-none'>\n      {editing ? 'Cancel' : 'Create Group'}\n    </Button>\n    {editing && (\n      <form onSubmit={createGroup} className='ml-2'>\n        <input\n          autoFocus\n          type='text'\n          onChange={updateNewGroupName}\n          value={newGroupName}\n          className='mr-2'\n        />\n        <Button\n          disabled={groupNameTaken || !newGroupName}\n          className='btn btn-outline-success shadow-none'\n        >\n          {groupNameTaken ? 'Group Name Taken' : 'Submit'}\n        </Button>\n      </form>\n    )}\n  </div>\n);\n\nexport default CreateGroupForm;","import React from 'react';\nimport Accordion from './Accordion';\nimport CreateGroupForm from './CreateGroupForm';\n\nconst PrefixAccordions = ({\n                            prefixGroups,\n                            handleGroupChange,\n                            editing, newGroupName,\n                            groupNameTaken,\n                            toggleEditing,\n                            updateNewGroupName,\n                            createGroup\n                          }) => {\n  const groupOptions = Object.keys(prefixGroups);\n  return (\n    <div className='mt-4'>\n      {prefixGroups && Object.keys(prefixGroups).length !== 0 && (\n        <>\n          <div className='d-inline-flex'>\n            <h2 className='mr-4'>Prefix Groups</h2>\n            <CreateGroupForm\n              editing={editing}\n              newGroupName={newGroupName}\n              groupNameTaken={groupNameTaken}\n              toggleEditing={toggleEditing}\n              updateNewGroupName={updateNewGroupName}\n              createGroup={createGroup}\n            />\n          </div>\n        </>\n      )}\n      <div>\n        {\n          groupOptions.map(groupName =>\n            <div key={groupName}>\n              <Accordion\n                groupName={groupName}\n                groupItems={prefixGroups[groupName]}\n                groupOptions={groupOptions}\n                handleGroupChange={handleGroupChange}\n              />\n            </div>\n          )\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default PrefixAccordions;\n\n","export const parseCSV = (f) => {\n  let r = new FileReader();\n  return new Promise((resolve, reject) => {\n    r.onerror = () => {\n      r.abort();\n      reject(new DOMException('Error loading file.'));\n    };\n\n    r.onload = () => {\n      const strings = r.result.split('\\n');\n      const groups = groupByPrefix(strings);\n      resolve(groups);\n    };\n\n    r.readAsBinaryString(f);\n  });\n};\n\nexport const groupByPrefix = (strings) => {\n  let groups = {};\n\n  for (let s of strings) {\n    s = s.trim();\n\n    if (!s) {\n      continue;\n    }\n\n    const prefix = s.split('_')[0];\n    let found = false;\n\n    for (const groupName of Object.keys(groups)) {\n      if (groupName.length >= prefix.length && groupName.substring(0, prefix.length) === prefix) {\n        groups[groupName].push(s);\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      groups[s] = [s];\n    }\n  }\n\n  return groups;\n};","import React, {Component} from 'react';\nimport InputCSV from './components/InputCSV';\nimport PrefixAccordions from './components/PrefixAccordions';\nimport {parseCSV} from './utils/parseUtils';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      groups: {},\n      editing: false,\n      newGroupName: '',\n      groupNameTaken: false\n    };\n  }\n\n  handleFileUpload = async (e) => {\n    const f = e.target.files[0];\n    try {\n      const groups = await parseCSV(f);\n      this.setState({groups});\n    } catch (e) {\n      console.warn(e.message);\n    }\n  };\n\n  handleGroupChange = (word, oldGroup, newGroup) => {\n    let {groups} = this.state;\n    const idx = groups[oldGroup].findIndex(item => (item === word));\n    delete groups[oldGroup][idx];\n    groups[newGroup].push(word);\n    this.setState({groups});\n  };\n\n  toggleEditing = () => {\n    this.setState((prevState) => (\n      {\n        ...prevState,\n        editing: !prevState.editing\n      }\n    ));\n  };\n\n  updateNewGroupName = (e) => {\n    const {groups} = this.state;\n    const newGroupName = e.target.value;\n    const groupNameTaken = newGroupName in groups;\n    this.setState((prevState) => (\n      {\n        ...prevState,\n        newGroupName,\n        groupNameTaken\n      }\n    ));\n  };\n\n  createGroup = () => {\n    let {groups} = this.state;\n    const {editing, newGroupName} = this.state;\n    groups[newGroupName] = [];\n    this.setState((prevState) => ({\n      ...prevState,\n      groups,\n      editing: !editing,\n      newGroupName: ''\n    }));\n  };\n\n  render() {\n    const {groups, editing, newGroupName, groupNameTaken} = this.state;\n    return (\n      <div className='container mt-3'>\n        <h1>Word Grouping App</h1>\n        <InputCSV handleFileUpload={this.handleFileUpload}/>\n        <PrefixAccordions\n          prefixGroups={groups}\n          handleGroupChange={this.handleGroupChange}\n          editing={editing}\n          newGroupName={newGroupName}\n          groupNameTaken={groupNameTaken}\n          toggleEditing={this.toggleEditing}\n          updateNewGroupName={this.updateNewGroupName}\n          createGroup={this.createGroup}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}